
import { useState, useEffect } from "react";
import { Message } from "../types/chat";
import { formatTimestamp } from "../utils/chatUtils";
import { renderTextWithLinks } from "../utils/textUtils";
import { Copy, Edit, Info } from "lucide-react";
import { Button } from "./ui/button";
import { toast } from "sonner";
import { useChatContext } from "../contexts/ChatContext";
import { ErrorTracker } from "@/utils/logging";
import { 
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";
import { Badge } from "./ui/badge";

interface ChatMessageProps {
  message: Message;
}

const ChatMessage = ({ message }: ChatMessageProps) => {
  const [formattedTime, setFormattedTime] = useState<string>("");
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState(message.content);
  const { sendMessage } = useChatContext();

  const sourceInfo = message.metadata?.sourceInfo;
  const hasSourceInfo = !!sourceInfo;

  useEffect(() => {
    // Use timestamp if available for backward compatibility, otherwise use createdAt
    const time = message.timestamp || new Date(message.createdAt).getTime();
    setFormattedTime(formatTimestamp(time));
  }, [message.timestamp, message.createdAt]);

  const isUser = message.role === "user";

  const handleCopyMessage = async () => {
    const errorTracker = new ErrorTracker('ChatMessage');
    try {
      await navigator.clipboard.writeText(message.content);
      toast.success("Message copied to clipboard");
      await errorTracker.logStage('copy_message', 'complete');
    } catch (err) {
      toast.error("Failed to copy message");
      await errorTracker.logError("Failed to copy message", err);
    }
  };

  const handleEditSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (editedContent.trim() === "") return;
    sendMessage(editedContent);
    setIsEditing(false);
  };

  // Function to render source information badge
  const renderSourceBadge = () => {
    if (!hasSourceInfo || isUser) return null;
    
    // Determine badge content based on source type
    let badgeText = "AI";
    let badgeVariant = "secondary";
    
    if (sourceInfo?.source === 'product_database' || sourceInfo?.source === 'brand_database') {
      badgeText = "Database";
      badgeVariant = "default";
    } else if (sourceInfo?.source === 'no_match' || sourceInfo?.source === 'database_error') {
      badgeText = "AI + Database";
      badgeVariant = "outline";
    }

    return (
      <HoverCard>
        <HoverCardTrigger asChild>
          <Badge className="ml-2 cursor-help" variant={badgeVariant as any}>
            <Info size={12} className="mr-1" />
            {badgeText}
          </Badge>
        </HoverCardTrigger>
        <HoverCardContent className="w-80">
          <div className="space-y-2">
            <h4 className="font-medium">Source Information</h4>
            {sourceInfo?.source === 'product_database' ? (
              <div>
                <p className="text-sm">Response based on product data in the State Map database.</p>
                <p className="text-sm font-medium mt-1">
                  {sourceInfo.legal 
                    ? `Products are permitted in ${sourceInfo.state}.` 
                    : `Products are NOT permitted in ${sourceInfo.state}.`}
                </p>
              </div>
            ) : sourceInfo?.source === 'brand_database' ? (
              <div>
                <p className="text-sm">Response based on brand data in the State Map database.</p>
                <p className="text-sm font-medium mt-1">
                  {sourceInfo.legal 
                    ? `Brand products are permitted in ${sourceInfo.state}.` 
                    : `Brand products are NOT permitted in ${sourceInfo.state}.`}
                </p>
              </div>
            ) : sourceInfo?.source === 'no_match' ? (
              <p className="text-sm">No exact match found in database. Response generated from AI.</p>
            ) : sourceInfo?.source === 'database_error' ? (
              <p className="text-sm">Error accessing database. Response generated from AI.</p>
            ) : (
              <p className="text-sm">Generated by AI assistant.</p>
            )}
            
            {message.metadata?.model && (
              <p className="text-xs text-muted-foreground mt-2">
                Model: {message.metadata.model}
              </p>
            )}
          </div>
        </HoverCardContent>
      </HoverCard>
    );
  };

  return (
    <div className={`flex items-start ${isUser ? "justify-end" : "justify-start"}`}>
      {!isUser && (
        <div className="flex-shrink-0 mr-2 mt-1">
          <img
            src="/lovable-uploads/ed09009c-763d-4847-b5cb-1d76525bd466.png"
            alt="AI Assistant"
            className="w-6 h-6 rounded-full"
          />
        </div>
      )}

      <div className={`flex flex-col ${isUser ? "items-end" : "items-start"} max-w-[85%]`}>
        <div className={isUser ? "chat-message-user" : "chat-message-assistant"}>
          {isEditing && isUser ? (
            <form onSubmit={handleEditSubmit} className="w-full">
              <textarea
                value={editedContent}
                onChange={(e) => setEditedContent(e.target.value)}
                className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={3}
                autoFocus
              />
              <div className="flex justify-end gap-2 mt-2">
                <Button size="sm" variant="ghost" onClick={() => setIsEditing(false)}>
                  Cancel
                </Button>
                <Button size="sm" type="submit">
                  Update
                </Button>
              </div>
            </form>
          ) : (
            <div className="text-[15px] font-normal leading-relaxed break-words whitespace-pre-wrap">
              {renderTextWithLinks(message.content)}
            </div>
          )}
        </div>
        
        <div className="flex items-center gap-2 mt-1 px-2">
          <div className="flex items-center">
            <span className="text-xs font-medium text-muted-foreground">{formattedTime}</span>
            {renderSourceBadge()}
          </div>
          {!isUser && <button onClick={handleCopyMessage} className="text-xs text-blue-500 hover:text-blue-700 transition-colors">Copy</button>}
          {isUser && <button onClick={() => setIsEditing(true)} className="text-xs text-blue-500 hover:text-blue-700 transition-colors">Edit</button>}
        </div>
      </div>

      {isUser && (
        <div className="flex-shrink-0 ml-2 mt-1">
          <div className="bg-gray-300 p-1 rounded-full text-white">
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" />
            </svg>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatMessage;
